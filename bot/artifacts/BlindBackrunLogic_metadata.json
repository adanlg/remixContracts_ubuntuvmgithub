{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "WETH",
				"outputs": [
					{
						"internalType": "contract IWETH",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "call",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "reserve0",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "reserve1",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isWETHZero",
								"type": "bool"
							}
						],
						"internalType": "struct IPairReserves.PairReserves",
						"name": "firstPairData",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "reserve0",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "reserve1",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isWETHZero",
								"type": "bool"
							}
						],
						"internalType": "struct IPairReserves.PairReserves",
						"name": "secondPairData",
						"type": "tuple"
					}
				],
				"name": "getAmountIn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "reserve0",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "reserve1",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isWETHZero",
								"type": "bool"
							}
						],
						"internalType": "struct IPairReserves.PairReserves",
						"name": "firstPairData",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "reserve0",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "reserve1",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isWETHZero",
								"type": "bool"
							}
						],
						"internalType": "struct IPairReserves.PairReserves",
						"name": "secondPairData",
						"type": "tuple"
					}
				],
				"name": "getDenominator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "reserve0",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "reserve1",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isWETHZero",
								"type": "bool"
							}
						],
						"internalType": "struct IPairReserves.PairReserves",
						"name": "firstPairData",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "reserve0",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "reserve1",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isWETHZero",
								"type": "bool"
							}
						],
						"internalType": "struct IPairReserves.PairReserves",
						"name": "secondPairData",
						"type": "tuple"
					}
				],
				"name": "getNumerator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"call(address,uint256,bytes)": {
					"details": "Only the contract owner can call this function.Reverted calls will result in a revert. ",
					"params": {
						"_data": "The calldata to send with the call.",
						"_to": "The address of the contract to call.",
						"_value": "The amount of Ether to send with the call."
					}
				},
				"getAmountIn((uint256,uint256,uint256,bool),(uint256,uint256,uint256,bool))": {
					"params": {
						"firstPairData": "Struct containing data about the first Uniswap V2 pair.",
						"secondPairData": "Struct containing data about the second Uniswap V2 pair."
					},
					"returns": {
						"_0": "amountIn, the optimal amount to trade to arbitrage two v2 pairs."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"call(address,uint256,bytes)": {
					"notice": "Executes a call to another contract with the provided data and value. The owner of this contract can help rescue assets accidentally left on contract, but in normal operation, this contract does not hold assets and is not centrally controlled."
				},
				"getAmountIn((uint256,uint256,uint256,bool),(uint256,uint256,uint256,bool))": {
					"notice": "Calculates the required input amount for the arbitrage transaction."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"bot/simpleblindbot.sol": "BlindBackrunLogic"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		".deps/npm/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c",
			"license": "MIT",
			"urls": [
				"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15",
				"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih"
			]
		},
		".deps/npm/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		".deps/npm/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		".deps/npm/@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		".deps/npm/forge-std/console.sol": {
			"keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
			"license": "MIT",
			"urls": [
				"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
				"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
			]
		},
		"bot/IWETH.sol": {
			"keccak256": "0x3272d46d46a444a09c97daa528127db3fc34d2df07c148c323af4b0eb0184dab",
			"urls": [
				"bzz-raw://b6320646f8f44d66b5d89788b276c4a7a948928c3086ec9841e8f2b61187e6ce",
				"dweb:/ipfs/QmVcZgCYGAZpUk5cZBGGSrw7zzSNn7pKQNwdySnYhws1vn"
			]
		},
		"bot/simpleblindbot.sol": {
			"keccak256": "0x3603f59ec298259cfcf65a8bab3a4403fed82db4a9a5d259cc208eeccf3e13a7",
			"urls": [
				"bzz-raw://e78a63a303500530c1e6dbada43c25985aef2f95bea239f349af3638d17922fe",
				"dweb:/ipfs/QmPKSeCUfCkQthtVu8shLxdW3scDg4qxnGdYq2qiepyYPn"
			]
		}
	},
	"version": 1
}